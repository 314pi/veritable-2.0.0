; ========================================================
; This file was generated by NSISDialogDesigner 0.9.14.0
; http://coolsoft.altervista.org/nsisdialogdesigner
; ========================================================

; handle variables
Var hCtl_GetHDDSerial
Var hCtl_GetHDDSerial_TextBox1
Var hCtl_GetHDDSerial_Label1

; dialog create function
Function fnc_GetHDDSerial_Create
  
  ; === GetHDDSerial (type: Dialog) ===
  nsDialogs::Create 1018
  Pop $hCtl_GetHDDSerial
  ${If} $hCtl_GetHDDSerial == error
    Abort
  ${EndIf}
  
  !insertmacro MUI_HEADER_TEXT "Dang ky ho tro" "Hay ghi lai ma so dang ky nhan ho tro tu nha cung cap phan mem"
  
  StrCpy $masoocung $R1
  ; === TextBox1 (type: Text) ===
  ${NSD_CreateText} 83u 48u 138u 11u "$R1"
  Pop $hCtl_GetHDDSerial_TextBox1
  ${NSD_AddStyle} $hCtl_GetHDDSerial_TextBox1 ${WS_DISABLED}
  
  
  ; === Label1 (type: Label) ===
  ${NSD_CreateLabel} 83u 33u 138u 14u "Ma so dang ky nhan ho tro cua ban la: "
  Pop $hCtl_GetHDDSerial_Label1
  
FunctionEnd

; ========================================================
; dialog show function
Function fnc_GetHDDSerial_Show

	StrCpy $R0 "$INSTDIR\diskid32.exe"
	nsExec::ExecToStack '$R0'
	Pop $R1  # contains return code
	Pop $R2  # contains output
	
	Push "Drive Serial Number_______________:" ; divider str
	Push $R2 ; input string
	 Call GetLastPart
	Pop $R1 ; last part
	Pop $R0 ; first part 
	
	Push "Drive Controller Revision Number__:" ; divider str
	Push $R1 ; input string
	 Call GetLastPart
	Pop $R1 ; last part
	Pop $R0 ; first part
	
	Push "]" ; divider str
	Push $R0 ; input string
	 Call GetLastPart
	Pop $R1 ; last part
	Pop $R0 ; first part 
	
Push "[" ; divider str
	Push $R0 ; input string
	 Call GetLastPart
	Pop $R1 ; last part
	Pop $R0 ; first part 	
	
	
  Call fnc_GetHDDSerial_Create
  nsDialogs::Show $hCtl_GetHDDSerial
FunctionEnd

; ========================================================

Function GetLastPart
	Exch $R0 ; input
	Exch
	Exch $R1 ; divider str
	Push $R2
	Push $R3
	Push $R4
	Push $R5
	 
	 StrCpy $R2 -1
	 StrLen $R4 $R0
	 StrLen $R5 $R1
	 Loop:
	  IntOp $R2 $R2 + 1
	  StrCpy $R3 $R0 $R5 $R2
	  StrCmp $R3 $R1 Chop
	  StrCmp $R2 $R4 0 Loop
	   StrCpy $R0 ""
	   StrCpy $R1 ""
	   Goto Done
	 Chop:
	  StrCpy $R1 $R0 $R2
	  IntOp $R2 $R2 + $R5
	  StrCpy $R0 $R0 "" $R2
	 Done:
	 
	Pop $R5
	Pop $R4
	Pop $R3
	Pop $R2
	Exch $R1 ; before
	Exch
	Exch $R0 ; after
FunctionEnd

; ========================================================
